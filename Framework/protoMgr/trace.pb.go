// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trace.proto

/*
	Package protoMgr is a generated protocol buffer package.

	It is generated from these files:
		trace.proto

	It has these top-level messages:
		TraceItem
		TraceObject
*/
package protoMgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

import idMgr "work.goproject.com/Framework/idMgr"
import time "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 跟踪的项
type TraceItem struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	UseTime   int64  `protobuf:"varint,4,opt,name=useTime,proto3" json:"useTime,omitempty"`
}

func (m *TraceItem) Reset()                    { *m = TraceItem{} }
func (m *TraceItem) String() string            { return proto.CompactTextString(m) }
func (*TraceItem) ProtoMessage()               {}
func (*TraceItem) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{0} }

func (m *TraceItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TraceItem) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TraceItem) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *TraceItem) GetUseTime() int64 {
	if m != nil {
		return m.UseTime
	}
	return 0
}

func (m *TraceItem) SetEndTime(endTime int64) {
	m.EndTime = endTime
	m.UseTime = (m.EndTime - m.StartTime) / 1000 / 1000
}

func NewTraceItem(name string, startTime int64) *TraceItem {
	return &TraceItem{
		Name:      name,
		StartTime: startTime,
		EndTime:   startTime,
		UseTime:   0,
	}
}

type TraceObject struct {
	Id         int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtendInfo string       `protobuf:"bytes,2,opt,name=extendInfo,proto3" json:"extendInfo,omitempty"`
	TraceItems []*TraceItem `protobuf:"bytes,3,rep,name=TraceItems" json:"TraceItems,omitempty"`
}

func (m *TraceObject) Reset() { *m = TraceObject{} }
func (m *TraceObject) String() string {
	for _, item := range m.TraceItems {
		item.StartTime = 0
		item.EndTime = 0
	}
	return proto.CompactTextString(m)
}
func (*TraceObject) ProtoMessage()               {}
func (*TraceObject) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{1} }

func (m *TraceObject) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TraceObject) GetExtendInfo() string {
	if m != nil {
		return m.ExtendInfo
	}
	return ""
}

func (m *TraceObject) GetTraceItems() []*TraceItem {
	if m != nil {
		return m.TraceItems
	}
	return nil
}

func (m *TraceObject) AddTraceItem(item *TraceItem) {
	m.TraceItems = append(m.TraceItems, item)
}

func NewTraceObject(extendInfo string) *TraceObject {
	id, err := idMgr.GenerateNewId(int64(1))
	if err != nil {
		id = time.Now().UnixNano()
	}

	return &TraceObject{
		Id:         id,
		ExtendInfo: extendInfo,
		TraceItems: make([]*TraceItem, 0, 4),
	}
}

func init() {
	proto.RegisterType((*TraceItem)(nil), "protoMgr.TraceItem")
	proto.RegisterType((*TraceObject)(nil), "protoMgr.TraceObject")
}
func (m *TraceItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.EndTime))
	}
	if m.UseTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.UseTime))
	}
	return i, nil
}

func (m *TraceObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.Id))
	}
	if len(m.ExtendInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.ExtendInfo)))
		i += copy(dAtA[i:], m.ExtendInfo)
	}
	if len(m.TraceItems) > 0 {
		for _, msg := range m.TraceItems {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTrace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Trace(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Trace(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTrace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TraceItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovTrace(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovTrace(uint64(m.EndTime))
	}
	if m.UseTime != 0 {
		n += 1 + sovTrace(uint64(m.UseTime))
	}
	return n
}

func (m *TraceObject) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrace(uint64(m.Id))
	}
	l = len(m.ExtendInfo)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	if len(m.TraceItems) > 0 {
		for _, e := range m.TraceItems {
			l = e.Size()
			n += 1 + l + sovTrace(uint64(l))
		}
	}
	return n
}

func sovTrace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrace(x uint64) (n int) {
	return sovTrace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TraceItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTime", wireType)
			}
			m.UseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceItems = append(m.TraceItems, &TraceItem{})
			if err := m.TraceItems[len(m.TraceItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("trace.proto", fileDescriptorTrace) }

var fileDescriptorTrace = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x29, 0x4a, 0x4c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xbe, 0xe9, 0x45, 0x4a, 0x85,
	0x5c, 0x9c, 0x21, 0x20, 0x09, 0xcf, 0x92, 0xd4, 0x5c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc,
	0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x86, 0x8b, 0xb3, 0xb8, 0x24,
	0xb1, 0xa8, 0x24, 0x24, 0x33, 0x37, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x08, 0x21, 0x20,
	0x24, 0xc1, 0xc5, 0x9e, 0x9a, 0x97, 0x02, 0x96, 0x63, 0x06, 0xcb, 0xc1, 0xb8, 0x20, 0x99, 0xd2,
	0xe2, 0x54, 0xb0, 0x0c, 0x0b, 0x44, 0x06, 0xca, 0x55, 0x2a, 0xe2, 0xe2, 0x06, 0x5b, 0xe9, 0x9f,
	0x94, 0x95, 0x9a, 0x5c, 0x22, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x02, 0xb6, 0x92, 0x39, 0x88, 0x29,
	0x33, 0x45, 0x48, 0x8e, 0x8b, 0x2b, 0xb5, 0xa2, 0x24, 0x35, 0x2f, 0xc5, 0x33, 0x2f, 0x2d, 0x1f,
	0x6c, 0x23, 0x67, 0x10, 0x92, 0x88, 0x90, 0x31, 0x17, 0x17, 0xdc, 0xc5, 0xc5, 0x12, 0xcc, 0x0a,
	0xcc, 0x1a, 0xdc, 0x46, 0xc2, 0x7a, 0x30, 0x0f, 0xe9, 0xc1, 0xe5, 0x82, 0x90, 0x94, 0x39, 0x09,
	0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb,
	0x31, 0x24, 0xb1, 0x81, 0x75, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x80, 0x88, 0xae,
	0x18, 0x01, 0x00, 0x00,
}
